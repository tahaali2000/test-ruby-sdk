# cypress_test_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module CypressTestApi
  # Item Model.
  class Item < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [UUID | String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [Date]
    attr_accessor :date

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :date_time

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :decimal

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :long

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :bool

    # TODO: Write general description for this method
    # @return [CustomEnum]
    attr_accessor :custom_enum

    # TODO: Write general description for this method
    # @return [StatusEnum]
    attr_accessor :status

    # A generic JSON object
    # @return [Object]
    attr_accessor :json_object

    # A generic JSON object
    # @return [Object]
    attr_accessor :animal

    # A generic JSON object
    # @return [Hash[String, Message]]
    attr_accessor :map

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['date'] = 'date'
      @_hash['date_time'] = 'dateTime'
      @_hash['decimal'] = 'decimal'
      @_hash['long'] = 'long'
      @_hash['bool'] = 'bool'
      @_hash['custom_enum'] = 'CustomEnum'
      @_hash['status'] = 'status'
      @_hash['json_object'] = 'jsonObject'
      @_hash['animal'] = 'Animal'
      @_hash['map'] = 'Map'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        status
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id:, name:, date:, date_time:, decimal:, long:, bool:,
                   custom_enum:, json_object:, animal:, map:, status: SKIP)
      @id = id
      @name = name
      @date = date
      @date_time = date_time
      @decimal = decimal
      @long = long
      @bool = bool
      @custom_enum = custom_enum
      @status = status unless status == SKIP
      @json_object = json_object
      @animal = animal
      @map = map
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      name = hash.key?('name') ? hash['name'] : nil
      date = hash.key?('date') ? hash['date'] : nil
      date_time = if hash.key?('dateTime')
                    (DateTimeHelper.from_rfc3339(hash['dateTime']) if hash['dateTime'])
                  end
      decimal = hash.key?('decimal') ? hash['decimal'] : nil
      long = hash.key?('long') ? hash['long'] : nil
      bool = hash.key?('bool') ? hash['bool'] : nil
      custom_enum = hash.key?('CustomEnum') ? hash['CustomEnum'] : nil
      json_object = hash.key?('jsonObject') ? hash['jsonObject'] : nil
      animal = hash.key?('Animal') ? hash['Animal'] : nil
      map = Message.from_hash(hash['Map']) if hash['Map']

      map = nil unless hash.key?('Map')
      status = hash.key?('status') ? hash['status'] : SKIP

      # Create object from extracted values.
      Item.new(id: id,
               name: name,
               date: date,
               date_time: date_time,
               decimal: decimal,
               long: long,
               bool: bool,
               custom_enum: custom_enum,
               json_object: json_object,
               animal: animal,
               map: map,
               status: status)
    end

    def to_custom_date_time
      DateTimeHelper.to_rfc3339(date_time)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, name: #{@name}, date: #{@date}, date_time: #{@date_time},"\
      " decimal: #{@decimal}, long: #{@long}, bool: #{@bool}, custom_enum: #{@custom_enum},"\
      " status: #{@status}, json_object: #{@json_object}, animal: #{@animal}, map: #{@map}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, name: #{@name.inspect}, date: #{@date.inspect},"\
      " date_time: #{@date_time.inspect}, decimal: #{@decimal.inspect}, long: #{@long.inspect},"\
      " bool: #{@bool.inspect}, custom_enum: #{@custom_enum.inspect}, status: #{@status.inspect},"\
      " json_object: #{@json_object.inspect}, animal: #{@animal.inspect}, map: #{@map.inspect}>"
    end
  end
end
